chainsMatrix <- laply(1:4, function(j)  metropolis1d(f, jumpSigma=.01, chainLength=10000) )
Rhat1(chainsMatrix)
plot( chainsMatrix[1,] )
chainsMatrix <- laply(1:4, function(j)  metropolis1d(f, jumpSigma=.01, chainLength=10000) )
Rhat1(chainsMatrix)
plot( chainsMatrix[1,] )
chainsMatrix <- laply(1:4, function(j)  metropolis1d(f, jumpSigma=.01, chainLength=10000) )
Rhat1(chainsMatrix)
plot( chainsMatrix[1,] )
chainsMatrix <- laply(1:4, function(j)  metropolis1d(f, jumpSigma=.01, chainLength=100000) )
Rhat1(chainsMatrix)
plot( chainsMatrix[1,] )
hist( chainsMatrix[1,] )
hist( chainsMatrix )
chainLength <- 100000
hist( chainsMatrix [1:(chainLength/2),])
hist( chainsMatrix [,1:(chainLength/2)])
hist( chainsMatrix [,(1+chainLength/2):chainLength])
chainsMatrix <- laply(1:4, function(j)  metropolis1d(f, jumpSigma=.1, chainLength=chainLength) )
chainLength <- 10000
chainsMatrix <- laply(1:4, function(j)  metropolis1d(f, jumpSigma=.1, chainLength=chainLength) )
chainsMatrix2 <- chainsMatrix [,(1+chainLength/2):chainLength]
Rhat1(chainsMatrix)
Rhat1(chainsMatrix2)
hist( chainsMatrix2 )
chainsMatrix <- laply(1:4, function(j)  metropolis1d(f, jumpSigma=.01, chainLength=chainLength) )
chainsMatrix2 <- chainsMatrix [,(1+chainLength/2):chainLength]
Rhat1(chainsMatrix)
Rhat1(chainsMatrix2)
chainsMatrix <- laply(1:4, function(j)  metropolis1d(f, start=rnorm(1), jumpSigma=.01, chainLength=chainLength) )
chainsMatrix2 <- chainsMatrix [,(1+chainLength/2):chainLength]
Rhat1(chainsMatrix)
Rhat1(chainsMatrix2)
hist( chainsMatrix2 )
chainsMatrix <- laply(1:4, function(j)  metropolis1d(f, start=rnorm(1), jumpSigma=.1, chainLength=chainLength) )
chainsMatrix2 <- chainsMatrix [,(1+chainLength/2):chainLength]
Rhat1(chainsMatrix)
Rhat1(chainsMatrix2)
hist( chainsMatrix2 )
chainLength <- 100000
chainsMatrix <- laply(1:4, function(j)  metropolis1d(f, start=rnorm(1), jumpSigma=.01, chainLength=chainLength) )
chainsMatrix2 <- chainsMatrix [,(1+chainLength/2):chainLength]
source(file.path(Sys.getenv("GITHUB_PATH"),"Kaggle.RUtilities","RHat", "RHat.R"))
source(file.path(Sys.getenv("GITHUB_PATH"),"Kaggle.RUtilities","RHat", "RHat.R"))
f
library(coda)
source('~/.active-rstudio-document', echo=TRUE)
RunMetropolisAndDiagnose(.001, 1000)
RunMetropolisAndDiagnose(.001, 1000)
RunMetropolisAndDiagnose <- function(jumpSigma, chainLength, nChains=5) {
f <- function(x) dnorm(x, mean=1, sd=1)*100 ## unnormalized variance ("100" is just to make sure it's seriously unnormalized)
chains <- as.mcmc.list( llply(1:nChains, function(j) metropolis1d(f, start=rnorm(1), jumpSigma=jumpSigma, chainLength=chainLength) ) )
plot(chains)
gelman.diag(chains)
gelman.plot(chains)
print(effectiveSize(chains))
return(NULL)
}
RunMetropolisAndDiagnose(.001, 1000)
gelman.plot(chains)
jumpSigma=.001
chainLength=1000
chains <- as.mcmc.list( llply(1:nChains, function(j) metropolis1d(f, start=rnorm(1), jumpSigma=jumpSigma, chainLength=chainLength) ) )
nChains=5
f <- function(x) dnorm(x, mean=1, sd=1)*100 ## unnormalized variance ("100" is just to make sure it's seriously unnormalized)
chains <- as.mcmc.list( llply(1:nChains, function(j) metropolis1d(f, start=rnorm(1), jumpSigma=jumpSigma, chainLength=chainLength) ) )
plot(chains)
gelman.diag(chains)
print(gelman.diag(chains))
RunMetropolisAndDiagnose <- function(jumpSigma, chainLength, nChains=5) {
f <- function(x) dnorm(x, mean=1, sd=1)*100 ## unnormalized variance ("100" is just to make sure it's seriously unnormalized)
chains <- as.mcmc.list( llply(1:nChains, function(j) metropolis1d(f, start=rnorm(1), jumpSigma=jumpSigma, chainLength=chainLength) ) )
plot(chains)
print(gelman.diag(chains))
gelman.plot(chains)
print(effectiveSize(chains)
}
RunMetropolisAndDiagnose <- function(jumpSigma, chainLength, nChains=5) {
f <- function(x) dnorm(x, mean=1, sd=1)*100 ## unnormalized variance ("100" is just to make sure it's seriously unnormalized)
chains <- as.mcmc.list( llply(1:nChains, function(j) metropolis1d(f, start=rnorm(1), jumpSigma=jumpSigma, chainLength=chainLength) ) )
plot(chains)
print(gelman.diag(chains))
gelman.plot(chains)
print(effectiveSize(chains))
}
RunMetropolisAndDiagnose(.001, 1000)
RunMetropolisAndDiagnose <- function(jumpSigma, chainLength, nChains=5) {
f <- function(x) dnorm(x, mean=1, sd=1)*100 ## unnormalized variance ("100" is just to make sure it's seriously unnormalized)
chains <- as.mcmc.list( llply(1:nChains, function(j) metropolis1d(f, start=rnorm(1), jumpSigma=jumpSigma, chainLength=chainLength) ) )
plot(chains)
print(gelman.diag(chains))
gelman.plot(chains)
print(effectiveSize(chains))
return(NULL)
}
RunMetropolisAndDiagnose(.001, 1000)
RunMetropolisAndDiagnose <- function(jumpSigma, chainLength, nChains=5) {
f <- function(x) dnorm(x, mean=1, sd=1)*100 ## unnormalized variance ("100" is just to make sure it's seriously unnormalized)
chains <- as.mcmc.list( llply(1:nChains, function(j) metropolis1d(f, start=rnorm(1), jumpSigma=jumpSigma, chainLength=chainLength) ) )
plot(chains)
print(gelman.diag(chains))
gelman.plot(chains)
print(sprintf("Effective sample size: ", effectiveSize(chains)))
return(NULL)
}
RunMetropolisAndDiagnose(.001, 1000)
effectiveSize(chains)
RunMetropolisAndDiagnose <- function(jumpSigma, chainLength, nChains=5) {
f <- function(x) dnorm(x, mean=1, sd=1)*100 ## unnormalized variance ("100" is just to make sure it's seriously unnormalized)
chains <- as.mcmc.list( llply(1:nChains, function(j) metropolis1d(f, start=rnorm(1), jumpSigma=jumpSigma, chainLength=chainLength) ) )
plot(chains)
print(gelman.diag(chains))
gelman.plot(chains)
cat(sprintf("Effective sample size: %f", effectiveSize(chains)))
return(NULL)
}
RunMetropolisAndDiagnose(.001, 1000)
RunMetropolisAndDiagnose <- function(jumpSigma, chainLength, nChains=5) {
f <- function(x) dnorm(x, mean=1, sd=1)*100 ## unnormalized variance ("100" is just to make sure it's seriously unnormalized)
chains <- as.mcmc.list( llply(1:nChains, function(j) metropolis1d(f, start=rnorm(1), jumpSigma=jumpSigma, chainLength=chainLength) ) )
plot(chains)
print(gelman.diag(chains))
gelman.plot(chains)
cat(sprintf("Effective sample size: %f\n\n", effectiveSize(chains)))
return(NULL)
}
RunMetropolisAndDiagnose(.001, 1000)
?return
RunMetropolisAndDiagnose <- function(jumpSigma, chainLength, nChains=5) {
f <- function(x) dnorm(x, mean=1, sd=1)*100 ## unnormalized variance ("100" is just to make sure it's seriously unnormalized)
chains <- as.mcmc.list( llply(1:nChains, function(j) metropolis1d(f, start=rnorm(1), jumpSigma=jumpSigma, chainLength=chainLength) ) )
plot(chains)
print(gelman.diag(chains))
gelman.plot(chains)
cat(sprintf("Effective sample size: %f\n\n", effectiveSize(chains)))
break
}
RunMetropolisAndDiagnose(.001, 1000)
```{r}
RunMetropolisAndDiagnose(jumpSigma=.2, chainLength=1000)
RunMetropolisAndDiagnose(jumpSigma=.1, chainLength=1000)
RunMetropolisAndDiagnose <- function(jumpSigma, chainLength, nChains=5) {
f <- function(x) dnorm(x, mean=1, sd=1)*100 ## unnormalized variance ("100" is just to make sure it's seriously unnormalized)
chains <- as.mcmc.list( llply(1:nChains, function(j) metropolis1d(f, start=rnorm(1), jumpSigma=jumpSigma, chainLength=chainLength) ) )
plot(chains)
print(gelman.diag(chains))
gelman.plot(chains)
cat(sprintf("Effective sample size: %f\n\n", effectiveSize(chains)))
hist(do.call(c, chains))
return(NULL)
}
RunMetropolisAndDiagnose(jumpSigma=.01, chainLength=1000)
RunMetropolisAndDiagnose(jumpSigma=.1, chainLength=1000)
RunMetropolisAndDiagnose(jumpSigma=.1, chainLength=1000)
set.seed(88789)
RunMetropolisAndDiagnose(jumpSigma=.01, chainLength=1000)
RunMetropolisAndDiagnose(jumpSigma=.1, chainLength=1000)
RunMetropolisAndDiagnose(jumpSigma=.1, chainLength=10000)
gelman.diag
RunMetropolisAndDiagnose(jumpSigma=.1, chainLength=1000)
RunMetropolisAndDiagnose(jumpSigma=.1, chainLength=10000)
?gelman.plot
?plot.mcmc
source(file.path(Sys.getenv("GITHUB_PATH"),"Kaggle.RUtilities","RProfile.R"))
source(file.path(Sys.getenv("GITHUB_PATH"),"Kaggle.RUtilities","RProfile.R"))
GithubPath <- function() return(Sys.getenv("GITHUB_PATH"))
GithubPath()
install.packages("devtools", dependencies = TRUE)
library(devtools)
has_devel()
?create
getwd()
create("average-predictive-comparisons")
create("average-predictive-comparisons")
install("average-predictive-comparisons")
install("average-predictive-comparisons")
?document
document("average-predictive-comparisons")
install("average-predictive-comparisons")
?example_function
document("average-predictive-comparisons")
install("average-predictive-comparisons")
?example_function
document("average-predictive-comparisons")
document("average-predictive-comparisons")
library("devtools")
document("average-predictive-comparisons")
install("average-predictive-comparisons")
?example_function
document("average-predictive-comparisons")
install("average-predictive-comparisons")
?example_function
dev_help("example_function")
load_all()
setwd("./average-predictive-comparisons")
load_all()
dev_help("example_function")
?example_function
document()
document()
load_all()
dev_help("example_function")
example_function("hi")
example_function("hi")
load_all()
example_function("hi")
load_all()
load_all()
dev_help("example_function")
example_function("hi")
Library
library("assertthat")
Library("assertthat")
library("assertthat")
?assert_that
a = assert_that(1==1)
a
message("hi")
a = assert_that(1==0)
a
see_if(1==0)
Titanic
class(Titanic)
?Titanic
titanic <- read.csv("http://lib.stat.cmu.edu/S/Harrell/data/ascii/titanic.txt")
str(titanic)
hist(titanic$age)
table(titanic$survived)
?invisible
f <- function() {
insisible("jwefjkgjhkhjghjg")
}
f()
f <- function() {
invisible("jwefjkgjhkhjghjg")
}
f()
a <- f()
a
## Fitting the model
fit.10 <- glm (switch ~ dist100 + arsenic + educ4,
family=binomial(link="logit"))
?attach.all
attach.all (wells)
library("arm")
Library("arm")
wells <- read.table ("wells.dat")
getwd()
wells <- read.table ("data/wells.dat")
attach.all (wells)
attach (wells)
fit.10 <- glm (switch ~ dist100 + arsenic + educ4, family=binomial(link="logit"))
str(wells)
dist100 <- dist/100
fit.10 <- glm (switch ~ dist100 + arsenic + educ4, family=binomial(link="logit"))
dist100 <- dist/100
educ4 <- educ/4
fit.10 <- glm (switch ~ dist100 + arsenic + educ4, family=binomial(link="logit"))
fit.10
display (fit.10)
fit.10
b <- coef(fit.10)
# for distance to nearest safe well
hi <- 1
lo <- 0
delta <- invlogit (b[1] + b[2]*hi + b[3]*arsenic + b[4]*educ4) -
invlogit (b[1] + b[2]*lo + b[3]*arsenic + b[4]*educ4)
print (mean(delta))
delta
library("devtools")
setwd("./average-predictive-comparisons")
getwd()
document()
document()
document()
getwd()
document()
document()
traceback()
document()
document()
document()
document()
document()
document()
document()
document()
load_all()
print (mean(delta))
detach (wells)
transform(wells, dist100 = dist/100, educ4 = educ/4)
wells <- transform(wells, dist100 = dist/100, educ4 = educ/4)
attach (wells)
predcomp_transition_specified(wells, low, high)
?predict
predict(wells, fit.10)
predict(fit.10, wells)
predcomp_transition_specified <- function(df, fit, input, low, high) {
dfHigh <- df
dfLow <- df
dfHigh[[input]] <- rep(high, nrow(df))
dfLow[[input]] <- rep(low, nrow(df))
return(
mean(predict(fit, dfHigh)) - predict(fit, dfLow)
)
}
one_apc <- function(df, fit, input, low, high) {
dfHigh <- df
dfLow <- df
dfHigh[[input]] <- rep(high, nrow(df))
dfLow[[input]] <- rep(low, nrow(df))
return(
mean(predict(fit, dfHigh)) - predict(fit, dfLow)
)
}
one_apc(wells, fit.10, "dist100", 0, 1)
one_apc <- function(df, fit, input, low, high) {
dfHigh <- df
dfLow <- df
dfHigh[[input]] <- rep(high, nrow(df))
dfLow[[input]] <- rep(low, nrow(df))
return(
mean(predict(fit, dfHigh)) - predict(fit, dfLow)
)
}
one_apc <- function(df, fit, input, low, high) {
dfHigh <- df
dfLow <- df
dfHigh[[input]] <- rep(high, nrow(df))
dfLow[[input]] <- rep(low, nrow(df))
return(
mean(predict(fit, dfHigh) - predict(fit, dfLow))
)
}
one_apc(wells, fit.10, "dist100", 0, 1)
hi <- 1
lo <- 0
delta <- invlogit (b[1] + b[2]*hi + b[3]*arsenic + b[4]*educ4) -
invlogit (b[1] + b[2]*lo + b[3]*arsenic + b[4]*educ4)
print (mean(delta))
?predict.glm
one_apc <- function(df, fit, input, low, high) {
dfHigh <- df
dfLow <- df
dfHigh[[input]] <- rep(high, nrow(df))
dfLow[[input]] <- rep(low, nrow(df))
return(
mean(predict.glm(fit, dfHigh, type="response") - predict(fit, dfLow, type="response"))
)
}
one_apc(wells, fit.10, "dist100", 0, 1)
?rbind.fill.matrix
rbind.fill.matrix
rbind.fill
methods("predict")
methods("glm")
methods(class="glm")
f <- function(x) UseMethod("f")
f("hi")
class(f)
class(mean)
class(predict)
f.function <- function(g) g(5)
exp
f(exo)
f(exp)
exp(5)
f(1)
one_apc <- function(fit, df, input, low, high) UseMethod("one_apc")
?sum
one_apc(fit.10, wells, "dist100", 0, 1)
fit.10 <- glm (switch ~ dist100 + arsenic + educ4, family=binomial(link="logit"), data=wells)
fit <- glm (switch ~ dist100 + arsenic + educ4, family=binomial(link="logit"), data=wells)
one_apc(fit.10, wells, "dist100", 0, 1)
one_apc <- function(fit, df, input, low, high) {
dfHigh <- df
dfLow <- df
dfHigh[[input]] <- rep(high, nrow(df))
dfLow[[input]] <- rep(low, nrow(df))
return(
mean(predict.glm(fit, dfHigh, type="response") - predict(fit, dfLow, type="response"))
)
}
one_apc(fit, wells, "dist100", 0, 1)
equals
library(testthat)
equals(one_apc(fit, wells, "dist100", 0, 1),  -0.2044681)
expect_that(one_apc(fit, wells, "dist100", 0, 1),  equals(-0.2044681))
?all.equal
expect_that(one_apc(fit, wells, "dist100", 0, 1),  equals(-0.2044681, tolerance=1e-5))
expect_that(one_apc(fit, wells, "dist100", 0, 1),  equals(-0.2044681, tolerance=1e-5))
library(testthat)
?test_that
diamonds
str(diamonds)
?diamonds
?Titanic
titanic <- read.csv("http://lib.stat.cmu.edu/S/Harrell/data/ascii/titanic.txt")
str(titanic)
expect_that(one_apc(fit, wells, "dist100", 0, 1),  equals(-0.2044681, tolerance=1e-5))
unz("http://www.stat.columbia.edu/~gelman/arm/examples/ARM_Data.zip")
unz("http://www.stat.columbia.edu/~gelman/arm/examples/ARM_Data.zip", "arsenic/wells.dat")
read.table( unz("http://www.stat.columbia.edu/~gelman/arm/examples/ARM_Data.zip", "arsenic/wells.dat") )
?unz
read.table( unz("~/Downloads/ARM_Data.zip", "arsenic/wells.dat") )
read.table( unz("~/Downloads/ARM_Data.zip", "wells.dat") )
read.table( unz("~/Downloads/ARM_Data.zip", "./arsenic/wells.dat") )
unz("~/Downloads/ARM_Data.zip", "./arsenic/wells.dat")
read.table( unz("~/Downloads/ARM_Data.zip", "arsenic/wells.dat") )
read.table( unz("~/Downloads/ARM_Data.zip", "arsenic//wells.dat") )
read.table( unz("~/Downloads/ARM_Data.zip", "arsenic") )
str(ozone)
str(baseball)
titanic <- read.csv("http://lib.stat.cmu.edu/S/Harrell/data/ascii/titanic.txt")
str(titanic)
titanicLogit <- glm (survived ~ pclass + age + sex, family=binomial(link="logit"), data=titanic)
titanicLogit
average_specified_comparison <- function(fit, df, input, low, high) {
dfHigh <- df
dfLow <- df
dfHigh[[input]] <- rep(high, nrow(df))
dfLow[[input]] <- rep(low, nrow(df))
return(
mean(predict.glm(fit, dfHigh, type="response") - predict(fit, dfLow, type="response"))
)
}
hist(titanic$age)
average_specified_comparison(titanicLogit, titanic, input="age", low=20, high=30)
average_specified_comparison(titanicLogit, titanic, input="age", low=20, high=40)
average_specified_comparison(titanicLogit, titanic, input="age", low=10, high=40)
titanic$sex
average_specified_comparison(titanicLogit, titanic, input="sex", low="male", high="female")
titanic <- read.csv("http://lib.stat.cmu.edu/S/Harrell/data/ascii/titanic.txt", stringsAsFactors=FALSE)
titanicLogit <- glm (survived ~ pclass + age + sex, family=binomial(link="logit"), data=titanic)
titanicLogit
titanic$sex
titanicLogit
average_specified_comparison(titanicLogit, titanic, input="age", low=10, high=40)
average_specified_comparison(titanicLogit, titanic, input="sex", low="male", high="female")
document()
document()
load_all()
titanicLogit <- glm (survived ~ pclass + age + sex, family=binomial(link="logit"), data=titanic)
titanicLogit
titanic$sex
average_specified_comparison(titanicLogit, titanic, input="age", low=10, high=40)
average_specified_comparison(titanicLogit, titanic, input="sex", low="male", high="female")
average_specified_comparison <- function(fit, df, input, low, high) {
browser()
dfHigh <- df
dfLow <- df
dfHigh[[input]] <- rep(high, nrow(df))
dfLow[[input]] <- rep(low, nrow(df))
return(
mean(predict.glm(fit, dfHigh, type="response") - predict(fit, dfLow, type="response"))
)
}
average_specified_comparison(titanicLogit, titanic, input="sex", low="male", high="female")
dfLow
dfHigh
predict(fit, dfLow)
predict(fit, df)
titanicLogit
summary(titanic)
predict(fit, df)
fit
predict(fit, titanic)
nrow(titanic)
titanic <- read.csv("http://lib.stat.cmu.edu/S/Harrell/data/ascii/titanic.txt", stringsAsFactors=FALSE)
nrow(titanic)
titanicLogit <- glm (survived ~ pclass + age + sex, family=binomial(link="logit"), data=titanic)
titanicLogit
summary(titanic)
titanic$sex
predict(fit, titanic)
?glm
titanicLogit <- glm (survived ~ pclass + age + sex, family=binomial(link="logit"), data=titanic)
titanicLogit
?glm
summary(titanic)
titanic$sex
predict(fit, titanic)
predict(titanicLogit, titanic)
titanic$sex
titanic$age
mean(is.na(titanic$age))
library(help = "datasets")
esoph
str(esoph)
str(iris)
str(swiss)
infert
str(infert)
?infert
plot(infert$age, infert$case)
qlot(infert$age, infert$case)
?glm
?logit
?frisk
frisk
library(arm)
library(arm)
frisk
data(frisk)
data
?data
data()
data("frisk")
data(frisk)
?logit
data(Frisk)
?msleep
